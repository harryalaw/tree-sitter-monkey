=====
Prefix
====

-5
!true
!false
!!!false

-----
(source_file
    (expression_statement
        (prefix_expression
            operand: (number))
    )
    (expression_statement
        (prefix_expression
            operand: (true))
    )
    (expression_statement
        (prefix_expression
            operand: (false))
    )
    (expression_statement
        (prefix_expression
            operand: (prefix_expression
                operand: (prefix_expression
                    operand: (false))))
    )
)
        

======
Binary operations / infix
====
5 + 5
5 - 5
5 / 5
5 * 5

----
(source_file
    (expression_statement
        (binary_expression
            left: (number)
            right: (number)))
    (expression_statement
        (binary_expression
            left: (number)
            right: (number)))
    (expression_statement
        (binary_expression
            left: (number)
            right: (number)))
    (expression_statement
        (binary_expression
            left: (number)
            right: (number)))
)


=====
Comparisons
=====
foo == bar
foo != bar
foo < bar
foo > bar

-----
(source_file
    (expression_statement
        (binary_expression
            left: (identifier)
            right: (identifier)))
    (expression_statement
        (binary_expression
            left: (identifier)
            right: (identifier)))
    (expression_statement
        (binary_expression
            left: (identifier)
            right: (identifier)))
    (expression_statement
        (binary_expression
            left: (identifier)
            right: (identifier)))

)


====
Call expressions
====
foo();
add(2, 3)
add(add(2,3), add(5,10))
max(5, add(5, (5 * 5)))

-----
(source_file
    (expression_statement
        (call_expression
            function: (identifier)
            arguments: (argument_list)))
    (expression_statement
        (call_expression
            function: (identifier)
            arguments: (argument_list
                (number)
                (number))))
    (expression_statement
        (call_expression
            function: (identifier)
            arguments: (argument_list
                (call_expression
                    function: (identifier)
                    arguments: (argument_list
                        (number)
                        (number)))
                (call_expression
                    function: (identifier)
                    arguments: (argument_list
                        (number)
                        (number))))))
    (expression_statement
        (call_expression
            function: (identifier)
            arguments: (argument_list
                (number)
                (call_expression
                    function: (identifier)
                    arguments: (argument_list
                        (number)
                        (parenthesized_expression
                            (binary_expression
                                left: (number)
                                right: (number))))))))
)


=====
Identifiers are expressions
=====

foo * bar / foobar
add(foo, bar)


----
(source_file
    (expression_statement
        (binary_expression
            left: (binary_expression
                left: (identifier)
                right: (identifier))
            right: (identifier)))
    (expression_statement
        (call_expression
            function: (identifier)
            arguments: (argument_list
                (identifier)
                (identifier))))
)

=====
Functions as expressions
=====
let add = fn(x,y) {
    return x + y
};

----
(source_file
    (let_statement
        name: (identifier)
        value: (function_literal
            parameters: (parameter_list
                (parameter_declaration
                    name: (identifier))
                (parameter_declaration
                    name: (identifier)))
            body: (block_statement
                    (return_statement
                        value: (binary_expression
                            left: (identifier)
                            right: (identifier)))))))


=====
Immediately invoked function
=====

fn(x, y) {
    return x + y;
}(5, 5);
(fn(x) { return x}(5) + 10) * 10;

-----
(source_file
    (expression_statement
        (call_expression
            function: (function_literal
                parameters: (parameter_list
                    (parameter_declaration
                        name: (identifier))
                    (parameter_declaration
                        name: (identifier)))
                body: (block_statement
                    (return_statement
                        value: (binary_expression
                            left: (identifier)
                            right: (identifier)))))
            arguments: (argument_list
                (number)
                (number))))
    (expression_statement
        (binary_expression
            left: (parenthesized_expression
                (binary_expression
                    left: (call_expression
                        function: (function_literal
                            parameters: (parameter_list
                                (parameter_declaration
                                    name: (identifier)))
                            body: (block_statement
                                (return_statement
                                    value: (identifier))))
                        arguments: (argument_list
                            (number)))
                    right: (number)))
            right: (number)))
    )

====
If expression no else
====
if (true) {
    return 0;
}

----
(source_file
    (expression_statement
        (if_expression
            condition: (true)
            consequence: (block_statement
                (return_statement
                    value: (number))))))
