====
Simple arithmetic
====

-a * b
((-a) * b)

----

(source_file
    (expression_statement
        (binary_expression
            left: (prefix_expression
                    operand: (identifier))
            right: (identifier)))
    (expression_statement
        (parenthesized_expression
            (binary_expression
                left: (parenthesized_expression
                         (prefix_expression
                            operand: (identifier)))
                right: (identifier)))))

====
Multiple prefix expressions
====

!-a
(!(-a))

----

(source_file
    (expression_statement
        (prefix_expression
            operand: (prefix_expression
                operand: (identifier))))
    (expression_statement
        (parenthesized_expression
            (prefix_expression
                operand: (parenthesized_expression
                    (prefix_expression
                        operand: (identifier)))))))

====
Addition precedence
====
a + b + c
((a + b) + c)

----

(source_file
    (expression_statement
        (binary_expression
            left: (binary_expression
                left: (identifier)
                right: (identifier))
            right: (identifier)))
    (expression_statement
        (parenthesized_expression
            (binary_expression
                left: (parenthesized_expression
                    (binary_expression
                        left: (identifier)
                        right: (identifier)))
                right: (identifier)))))


====
Subtraction precedence
====

a + b - c
((a + b) - c)

----

(source_file
    (expression_statement
        (binary_expression
            left: (binary_expression
                left: (identifier)
                right: (identifier))
            right: (identifier)))
    (expression_statement
        (parenthesized_expression
            (binary_expression
                left: (parenthesized_expression
                    (binary_expression
                        left: (identifier)
                        right: (identifier)))
                right: (identifier)))))
====
Multiplication
====

a * b * c
((a * b) * c)

----

(source_file
    (expression_statement
        (binary_expression
            left: (binary_expression
                left: (identifier)
                right: (identifier))
            right: (identifier)))
    (expression_statement
        (parenthesized_expression
            (binary_expression
                left: (parenthesized_expression
                    (binary_expression
                        left: (identifier)
                        right: (identifier)))
                right: (identifier)))))
====
Mult and Division
====

a * b / c
((a * b) / c)

----

(source_file
    (expression_statement
        (binary_expression
            left: (binary_expression
                left: (identifier)
                right: (identifier))
            right: (identifier)))
    (expression_statement
        (parenthesized_expression
            (binary_expression
                left: (parenthesized_expression
                    (binary_expression
                        left: (identifier)
                        right: (identifier)))
                right: (identifier)))))

====
Division and addition
====

a + b / c
(a + (b / c))

----

(source_file
    (expression_statement
        (binary_expression
            left: (identifier)
            right: (binary_expression
                left: (identifier)
                right: (identifier))))
    (expression_statement
        (parenthesized_expression
            (binary_expression
                left: (identifier)
                right: (parenthesized_expression
                    (binary_expression
                        left: (identifier)
                        right: (identifier)))))))
====
All the arithmetic operations
====

a + b * c + d / e - f

----

(source_file
    (expression_statement
        (binary_expression
            left: (binary_expression
                left: (binary_expression
                    left: (identifier)
                    right: (binary_expression
                        left: (identifier)
                        right: (identifier)))
                right: (binary_expression
                    left: (identifier)
                    right: (identifier)))
            right: (identifier))))

====
Semicolons stop parsing
====

3 + 4; -5 * 5

----
(source_file
    (expression_statement
        (binary_expression
            left: (number)
            right: (number)))
    (expression_statement
        (binary_expression
            left: (prefix_expression
                operand: (number))
            right: (number))))
====
Boolean comparisons
====

5 > 4 != 3 < 4

----
(source_file
    (expression_statement
        (binary_expression
            left: (binary_expression
                left: (number)
                right: (number))
            right: (binary_expression
                left: (number)
                right: (number)))))
====
Comparing arithmetic operations
====
3 + 4 * 5 == 3 * 1 + 4 * 5
----
(source_file
    (expression_statement
        (binary_expression
            left: (binary_expression
                left: (number)
                right: (binary_expression
                    left: (number)
                    right: (number)))
            right: (binary_expression
                left: (binary_expression
                    left: (number)
                    right: (number))
                right: (binary_expression
                    left: (number)
                    right: (number))))))
====
Equality with prefix operators
====

1 + -3 == -2

----

(source_file
    (expression_statement
        (binary_expression
            left: (binary_expression
                left: (number)
                right: (prefix_expression
                        operand: (number)))
            right: (prefix_expression
                operand: (number)))))
====
Comparing to boolean
====

3 > 5 == false
3 < 5 == true

----

(source_file
    (expression_statement
        (binary_expression
            left: (binary_expression
                left: (number)
                right: (number))
            right: (false)))
    (expression_statement
        (binary_expression
            left: (binary_expression
                left: (number)
                right: (number))
            right: (true))))
====
Arithmetic with parenthesis
====

(a + (b + c)) * 2

----

(source_file
    (expression_statement
        (binary_expression
            left: (parenthesized_expression
                (binary_expression
                    left: (identifier)
                    right: (parenthesized_expression
                        (binary_expression
                            left: (identifier)
                            right: (identifier)))))
            right: (number))))

====
Precedence in function arguments
====

add(a, b, 1, 2 * 3, 4 + 5, add(6, 7 * 8))

----

(source_file
    (expression_statement
        (call_expression
            function: (identifier)
            arguments: (argument_list
                (identifier)
                (identifier)
                (number)
                (binary_expression
                    left: (number)
                    right: (number))
                (binary_expression
                    left: (number)
                    right: (number))
                (call_expression
                    function: (identifier)
                    arguments: (argument_list
                        (number)
                        (binary_expression
                            left: (number)
                            right: (number))))))))
====
Precedence with array methods
====

a * [1, 2, 3, 4][b * c] * d

----

(source_file
    (expression_statement
        (binary_expression
            left: (binary_expression
                left: (identifier)
                right: (index_expression
                    operand: (array_expression
                        (number)
                        (number)
                        (number)
                        (number)
                    )
                    index: (binary_expression
                        left: (identifier)
                        right: (identifier))))
            right: (identifier))))
====
Function calls and array access
====

add(a * b[2], b[1], 2 * [1, 2][1])

----

(source_file
    (expression_statement
        (call_expression
            function: (identifier)
            arguments: (argument_list
                (binary_expression
                    left: (identifier)
                    right: (index_expression
                        operand: (identifier)
                        index: (number)))
                (index_expression
                    operand: (identifier)
                    index: (number))
                (binary_expression
                    left: (number)
                    right: (index_expression
                        operand: (array_expression
                            (number)
                            (number))
                        index: (number)))))))
